When you create a service class with the [create-service-class|Scripts] command, it is highly recommended that you also create the corresponding unit tests. You can achieve this by executing the [create-unit-test-service|Scripts] command:
{code}
grails create-unit-test-service [domainClass]
{code}
Suppose you have a class named @mypackage.Person@. With the [create-unit-test-service|Scripts] command, you will get the following unit test files:
* @test/unit/mypackage/PersonServiceListTests.groovy@
* @test/unit/mypackage/PersonServiceListMaxTests.groovy@
* @test/unit/mypackage/PersonServiceListOffsetTests.groovy@
* @test/unit/mypackage/PersonServiceListSortOrderTests.groovy@
* @test/unit/mypackage/PersonServiceCreateTests.groovy@
* @test/unit/mypackage/PersonServiceUpdateTests.groovy@
* @test/unit/mypackage/PersonServiceGetTests.groovy@
* @test/unit/mypackage/PersonServiceDeleteTests.groovy@
You can generate each file with the following commands:
{table}
 *File* | *Command*
 @test/unit/mypackage/PersonServiceListTests.groovy@ | [create-unit-test-service-list|Scripts]
 @test/unit/mypackage/PersonServiceListMaxTests.groovy@ | [create-unit-test-service-list-max|Scripts]
 @test/unit/mypackage/PersonServiceListOffsetTests.groovy@ | [create-unit-test-service-list-offset|Scripts]
 @test/unit/mypackage/PersonServiceListSortOrderTests.groovy@ | [create-unit-test-service-list-sort-order|Scripts]
 @test/unit/mypackage/PersonServiceCreateTests.groovy@ | [create-unit-test-service-create|Scripts]
 @test/unit/mypackage/PersonServiceUpdateTests.groovy@ | [create-unit-test-service-update|Scripts]
 @test/unit/mypackage/PersonServiceGetTests.groovy@ | [create-unit-test-service-get|Scripts]
 @test/unit/mypackage/PersonServiceDeleteTests.groovy@ | [create-unit-test-service-delete|Scripts]
{table}
If we open the @test/unit/mypackage/PersonServiceCreateTests.groovy@ file, we will find something like this:
{code}
package mypackage

import grails.test.mixin.*
import org.junit.*
import org.junit.rules.*

@TestFor(PersonService)
@Mock(Person)
class PersonServiceCreateTests {

    @Rule
    public ExpectedException thrown = ExpectedException.none()

    void testOk() {

        def instance = PersonMock.mock( 0 )
        assertEquals "'count' should be 0", 0, Person.count()
        service.create( instance )
        assertEquals "'count' should be 1", 1, Person.count()

    }

    void testPersonNull() {

        def instance = null
        thrown.expect( IllegalArgumentException )
        thrown.expectMessage( "Parameter 'person' is null" )
        service.create( instance )

    }

    void testPersonInvalid() {

        def instance = PersonMock.mock( 0 )
        instance.name = null
        thrown.expect( IllegalArgumentException )
        thrown.expectMessage( "Parameter 'person' is invalid" )
        service.create( instance )

    }

}
{code}
The plugin generates a unit test that makes use of the @ExpectedException@ JUnit class for managing the tests exceptions. You can notice the presence of the @PersonMock@ class.  This class is automatically generated and placed in the @src/groovy/mypackage/PersonMock.groovy@ file, and it contains utility methods for mocking a @Person@ valid domain class:
{code}
package mypackage

class PersonMock {

    static Person mock( id ) {

        def instance = new Person(
            name:'A' * 1,
            lastName:'A' * 1,
            birthdate:new Date(),
            enabled:true,
        )
        instance

    }

}
{code}
If you change the id of this class (to @assigned@, for example), this class already consider it, allowing you to set the id by hand.

You can generate the mock class separately by executing the [create-mock|Scripts] command.
